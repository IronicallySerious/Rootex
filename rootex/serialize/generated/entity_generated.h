// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITY_ROOTEX_H_
#define FLATBUFFERS_GENERATED_ENTITY_ROOTEX_H_

#include "flatbuffers/flatbuffers.h"

namespace Rootex {

struct Entity;
struct EntityBuilder;

struct Entity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_M_ID = 4,
    VT_M_NAME = 6
  };
  int32_t m_ID() const {
    return GetField<int32_t>(VT_M_ID, 0);
  }
  const flatbuffers::String *m_Name() const {
    return GetPointer<const flatbuffers::String *>(VT_M_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_M_ID) &&
           VerifyOffset(verifier, VT_M_NAME) &&
           verifier.VerifyString(m_Name()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_m_ID(int32_t m_ID) {
    fbb_.AddElement<int32_t>(Entity::VT_M_ID, m_ID, 0);
  }
  void add_m_Name(flatbuffers::Offset<flatbuffers::String> m_Name) {
    fbb_.AddOffset(Entity::VT_M_NAME, m_Name);
  }
  explicit EntityBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EntityBuilder &operator=(const EntityBuilder &);
  flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline flatbuffers::Offset<Entity> CreateEntity(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t m_ID = 0,
    flatbuffers::Offset<flatbuffers::String> m_Name = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_m_Name(m_Name);
  builder_.add_m_ID(m_ID);
  return builder_.Finish();
}

inline flatbuffers::Offset<Entity> CreateEntityDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t m_ID = 0,
    const char *m_Name = nullptr) {
  auto m_Name__ = m_Name ? _fbb.CreateString(m_Name) : 0;
  return Rootex::CreateEntity(
      _fbb,
      m_ID,
      m_Name__);
}

inline const Rootex::Entity *GetEntity(const void *buf) {
  return flatbuffers::GetRoot<Rootex::Entity>(buf);
}

inline const Rootex::Entity *GetSizePrefixedEntity(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Rootex::Entity>(buf);
}

inline bool VerifyEntityBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Rootex::Entity>(nullptr);
}

inline bool VerifySizePrefixedEntityBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Rootex::Entity>(nullptr);
}

inline void FinishEntityBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Rootex::Entity> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntityBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Rootex::Entity> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Rootex

#endif  // FLATBUFFERS_GENERATED_ENTITY_ROOTEX_H_
